\begin{Verbatim}[commandchars=\\\{\}]
  \PYGfriendly{c+cm}{/*}
\PYGfriendly{c+cm}{   * @brief Convert the float given to a string}
\PYGfriendly{c+cm}{   * @params rain: Rain in mm}
\PYGfriendly{c+cm}{   *         dec: Number of digits to the left of the decimal point}
\PYGfriendly{c+cm}{   *         frac: Number of decimal places (precision)}
\PYGfriendly{c+cm}{   * @retval Pointer to the converted string}
\PYGfriendly{c+cm}{   * @note String must be freed after use}
\PYGfriendly{c+cm}{   */}
  \PYGfriendly{k}{static} \PYGfriendly{k+kt}{uint8\PYGfriendlyZus{}t} \PYGfriendly{o}{*}\PYGfriendly{n+nf}{ConverttoBCD}\PYGfriendly{p}{(}\PYGfriendly{k+kt}{float} \PYGfriendly{n}{number}\PYGfriendly{p}{,} \PYGfriendly{k+kt}{uint8\PYGfriendlyZus{}t} \PYGfriendly{n}{dec}\PYGfriendly{p}{,} \PYGfriendly{k+kt}{uint8\PYGfriendlyZus{}t} \PYGfriendly{n}{frac}\PYGfriendly{p}{)} \PYGfriendly{p}{\PYGfriendlyZob{}}
    \PYGfriendly{k+kt}{uint8\PYGfriendlyZus{}t} \PYGfriendly{o}{*}\PYGfriendly{n}{string}\PYGfriendly{p}{;} \PYGfriendly{c+c1}{// Pointer to the resulting string}
    \PYGfriendly{k+kt}{uint32\PYGfriendlyZus{}t} \PYGfriendly{n}{rainDec} \PYGfriendly{o}{=} \PYGfriendly{n}{number}\PYGfriendly{o}{*}\PYGfriendly{n}{pow}\PYGfriendly{p}{(}\PYGfriendly{l+m+mi}{10}\PYGfriendly{p}{,}\PYGfriendly{n}{frac}\PYGfriendly{p}{);} \PYGfriendly{c+c1}{// Shift all digits to be used onto the left side of the decimal point}
    \PYGfriendly{k+kt}{uint32\PYGfriendlyZus{}t} \PYGfriendly{n}{strLength} \PYGfriendly{o}{=} \PYGfriendly{p}{(}\PYGfriendly{n}{dec} \PYGfriendly{o}{+} \PYGfriendly{n}{frac} \PYGfriendly{o}{+} \PYGfriendly{l+m+mi}{2}\PYGfriendly{p}{)}\PYGfriendly{o}{*}\PYGfriendly{k}{sizeof}\PYGfriendly{p}{(}\PYGfriendly{k+kt}{uint8\PYGfriendlyZus{}t}\PYGfriendly{p}{);} \PYGfriendly{c+c1}{// Calculate the length of the require string given the accuracy parameters}
    \PYGfriendly{n}{string} \PYGfriendly{o}{=} \PYGfriendly{n}{malloc}\PYGfriendly{p}{(}\PYGfriendly{n}{strLength}\PYGfriendly{p}{);} \PYGfriendly{c+c1}{// Allocate space for the resulting string}
    \PYGfriendly{n}{memset}\PYGfriendly{p}{(}\PYGfriendly{n}{string}\PYGfriendly{p}{,} \PYGfriendly{l+s+sc}{\PYGfriendlyZsq{}0\PYGfriendlyZsq{}}\PYGfriendly{p}{,} \PYGfriendly{n}{strLength}\PYGfriendly{p}{);} \PYGfriendly{c+c1}{// Set all characters in the string to zeroes}

    \PYGfriendly{c+c1}{// Loop through the digits in the newly formed integer number and place the digits in the string}
    \PYGfriendly{k+kt}{int} \PYGfriendly{n}{pos} \PYGfriendly{o}{=} \PYGfriendly{l+m+mi}{0}\PYGfriendly{p}{;}
    \PYGfriendly{k+kt}{int} \PYGfriendly{n}{dig} \PYGfriendly{o}{=} \PYGfriendly{l+m+mi}{0}\PYGfriendly{p}{;}
    \PYGfriendly{k}{for} \PYGfriendly{p}{(}\PYGfriendly{n}{pos} \PYGfriendly{o}{=} \PYGfriendly{l+m+mi}{0}\PYGfriendly{p}{;} \PYGfriendly{n}{pos} \PYGfriendly{o}{\PYGfriendlyZlt{}} \PYGfriendly{n}{strLength}\PYGfriendly{p}{;} \PYGfriendly{n}{pos}\PYGfriendly{o}{++}\PYGfriendly{p}{)} \PYGfriendly{p}{\PYGfriendlyZob{}}
      \PYGfriendly{c+c1}{// If we reach the end of the decimal part of the number, skip a position for placement of the decimal point}
      \PYGfriendly{k}{if} \PYGfriendly{p}{(}\PYGfriendly{n}{pos} \PYGfriendly{o}{==} \PYGfriendly{n}{dec}\PYGfriendly{p}{)} \PYGfriendly{p}{\PYGfriendlyZob{}}
        \PYGfriendly{n}{pos}\PYGfriendly{o}{++}\PYGfriendly{p}{;}
      \PYGfriendly{p}{\PYGfriendlyZcb{}}

      \PYGfriendly{c+c1}{// Extract the digit from the newly formed integer number based on the position}
      \PYGfriendly{k+kt}{uint32\PYGfriendlyZus{}t} \PYGfriendly{n}{multiplier} \PYGfriendly{o}{=} \PYGfriendly{n}{pow}\PYGfriendly{p}{(}\PYGfriendly{l+m+mi}{10}\PYGfriendly{p}{,} \PYGfriendly{n}{strLength}\PYGfriendly{o}{\PYGfriendlyZhy{}}\PYGfriendly{n}{dig}\PYGfriendly{o}{\PYGfriendlyZhy{}}\PYGfriendly{l+m+mi}{3}\PYGfriendly{p}{);}
      \PYGfriendly{k+kt}{uint32\PYGfriendlyZus{}t} \PYGfriendly{n}{digit} \PYGfriendly{o}{=} \PYGfriendly{p}{(}\PYGfriendly{k+kt}{uint32\PYGfriendlyZus{}t}\PYGfriendly{p}{)(}\PYGfriendly{n}{rainDec}\PYGfriendly{o}{/}\PYGfriendly{n}{multiplier}\PYGfriendly{p}{);}
      \PYGfriendly{n}{string}\PYGfriendly{p}{[}\PYGfriendly{n}{pos}\PYGfriendly{p}{]} \PYGfriendly{o}{=} \PYGfriendly{p}{(}\PYGfriendly{k+kt}{uint8\PYGfriendlyZus{}t}\PYGfriendly{p}{)(}\PYGfriendly{n}{digit} \PYGfriendly{o}{+} \PYGfriendly{l+m+mi}{48}\PYGfriendly{p}{);} \PYGfriendly{c+c1}{// Convert the number to ASCII by adding 48 to it}
      \PYGfriendly{n}{rainDec} \PYGfriendly{o}{\PYGfriendlyZhy{}=} \PYGfriendly{n}{digit}\PYGfriendly{o}{*}\PYGfriendly{n}{multiplier}\PYGfriendly{p}{;} \PYGfriendly{c+c1}{// Subtract the extracted digit from the integer number}

      \PYGfriendly{c+c1}{// Increment the digit number}
      \PYGfriendly{n}{dig}\PYGfriendly{o}{++}\PYGfriendly{p}{;}
    \PYGfriendly{p}{\PYGfriendlyZcb{}}

    \PYGfriendly{c+c1}{// Place the decimal point and the null terminator in the correct positions}
    \PYGfriendly{n}{string}\PYGfriendly{p}{[}\PYGfriendly{n}{dec}\PYGfriendly{p}{]} \PYGfriendly{o}{=} \PYGfriendly{l+s+sc}{\PYGfriendlyZsq{}.\PYGfriendlyZsq{}}\PYGfriendly{p}{;}
    \PYGfriendly{n}{string}\PYGfriendly{p}{[}\PYGfriendly{n}{strLength} \PYGfriendly{o}{\PYGfriendlyZhy{}} \PYGfriendly{l+m+mi}{1}\PYGfriendly{p}{]} \PYGfriendly{o}{=} \PYGfriendly{l+s+sc}{\PYGfriendlyZsq{}\PYGfriendlyZbs{}0\PYGfriendlyZsq{}}\PYGfriendly{p}{;}

    \PYGfriendly{c+c1}{// Return the pointer to the converted string}
    \PYGfriendly{k}{return} \PYGfriendly{n}{string}\PYGfriendly{p}{;}
  \PYGfriendly{p}{\PYGfriendlyZcb{}}
\end{Verbatim}
